#N canvas 0 22 1280 752 10;
#X obj 1003 182 samphold~;
#X obj 1003 206 +~ 1;
#X obj 1003 230 expr~ $v1 % 26;
#X obj 1099 458 expr~ $v1 & $v2;
#X obj 1099 482 *~ -1;
#X obj 1099 506 +~ 1;
#X obj 989 522 samphold~;
#X obj 988 565 expr~ $v1 % 26;
#X obj 989 545 +~ 1;
#X obj 1147 299 samphold~;
#X obj 1147 323 +~ 1;
#X obj 1147 347 expr~ $v1 % 26;
#X obj 1013 264 delwrite~ \$0-rp 0;
#X obj 1003 88 delread~ \$0-rp 0;
#X obj 1147 265 delread~ \$0-mp 0;
#X obj 1157 371 delwrite~ \$0-mp 0;
#X obj 988 639 delwrite~ \$0-lp 0;
#X obj 989 500 delread~ \$0-lp 0;
#X obj 1099 530 delwrite~ \$0-ds 0;
#X obj 1267 285 delread~ \$0-ds 0;
#X obj 1110 594 outlet~;
#X obj 1056 592 outlet~;
#X obj 1002 593 outlet~;
#X obj 23 317 block~ 1 1 1;
#X obj 83 189 s \$0-lw;
#X obj 203 189 s \$0-rw;
#X obj 143 189 s \$0-mw;
#N canvas 21 431 453 272 turnover 0;
#X obj 54 144 sel 1 2 3;
#X msg 54 165 24;
#X msg 84 165 4;
#X msg 114 165 13;
#X obj 144 144 sel 1 2 3;
#X msg 144 165 24;
#X msg 174 165 4;
#X msg 204 165 13;
#X obj 144 186 s \$0-rt;
#X obj 54 186 s \$0-mt;
#X obj 54 123 r \$0-mw;
#X obj 144 123 r \$0-rw;
#X text 54 43 this subpatch receives information about the current
wheel order. depending on whether wheel types 1 \, 2 \, or 3 are set
as the right and middle wheels on the spindle (w) \, their associated
turnover positions (t) will be sent to the counter subpatch.;
#X connect 0 0 1 0;
#X connect 0 1 2 0;
#X connect 0 2 3 0;
#X connect 1 0 9 0;
#X connect 2 0 9 0;
#X connect 3 0 9 0;
#X connect 4 0 5 0;
#X connect 4 1 6 0;
#X connect 4 2 7 0;
#X connect 5 0 8 0;
#X connect 6 0 8 0;
#X connect 7 0 8 0;
#X connect 10 0 0 0;
#X connect 11 0 4 0;
#X restore 23 277 pd turnover;
#X obj 1165 142 r \$0-rt;
#X floatatom 1165 163 0 0 0 0 - - -;
#X obj 1264 406 r \$0-mt;
#X floatatom 1264 427 0 0 0 0 - - -;
#X obj 1264 447 sig~;
#X text 1036 206 right rotor;
#X text 1185 322 middle rotor;
#X text 1020 545 left rotor;
#X msg 133 625 set \$1;
#X obj 133 564 list prepend \$0-r1;
#X obj 133 584 list prepend \$0-r2;
#X obj 133 604 list prepend \$0-r3;
#X msg 253 625 set \$1;
#X obj 253 564 list prepend \$0-r1;
#X obj 253 584 list prepend \$0-r2;
#X obj 253 604 list prepend \$0-r3;
#X msg 373 625 set \$1;
#X obj 373 564 list prepend \$0-r1;
#X obj 373 584 list prepend \$0-r2;
#X obj 373 604 list prepend \$0-r3;
#X obj 133 543 sel 1 2 3;
#X obj 253 543 sel 1 2 3;
#X obj 373 543 sel 1 2 3;
#X msg 593 625 set \$1;
#X obj 593 543 sel 1 2 3;
#X msg 723 625 set \$1;
#X obj 723 543 sel 1 2 3;
#X msg 853 625 set \$1;
#X obj 853 543 sel 1 2 3;
#X obj 593 564 list prepend \$0-_r1;
#X obj 593 584 list prepend \$0-_r2;
#X obj 593 604 list prepend \$0-_r3;
#X obj 723 564 list prepend \$0-_r1;
#X obj 723 584 list prepend \$0-_r2;
#X obj 723 604 list prepend \$0-_r3;
#X obj 853 564 list prepend \$0-_r1;
#X obj 853 584 list prepend \$0-_r2;
#X obj 853 604 list prepend \$0-_r3;
#X obj 133 522 r \$0-rw;
#X obj 373 522 r \$0-lw;
#X obj 593 522 r \$0-lw;
#X obj 723 522 r \$0-mw;
#X obj 853 522 r \$0-rw;
#X obj 253 521 r \$0-mw;
#X obj 598 371 r \$0-up;
#X obj 973 686 tabread~ \$0-_etw;
#X obj 973 454 expr~ $v1 % 26;
#X obj 973 433 +~ 26;
#X obj 973 412 -~;
#X text 998 411 -rp;
#X obj 843 646 tabread~;
#X obj 843 495 expr~ $v1 % 26;
#X obj 843 474 +~;
#X text 867 475 +rp;
#X obj 843 454 expr~ $v1 % 26;
#X obj 843 433 +~ 26;
#X obj 843 412 -~;
#X text 868 415 -mp;
#X obj 713 646 tabread~;
#X obj 713 496 expr~ $v1 % 26;
#X obj 713 474 +~;
#X text 739 475 +mp;
#X obj 713 454 expr~ $v1 % 26;
#X obj 713 433 +~ 26;
#X obj 713 412 -~;
#X text 737 413 -lp;
#X obj 583 646 tabread~;
#X obj 583 497 expr~ $v1 % 26;
#X obj 583 476 +~;
#X text 608 477 +lp;
#X obj 583 454 expr~ $v1 % 26;
#X obj 583 433 +~ 26;
#X obj 583 412 -~;
#X obj 483 646 tabread~ \$0-ukw;
#X obj 483 625 expr~ $v1 % 26;
#X obj 483 604 +~;
#X obj 483 454 expr~ $v1 % 26;
#X obj 483 433 +~ 26;
#X obj 483 412 -~;
#X text 508 411 -lp;
#X obj 363 646 tabread~;
#X obj 363 497 expr~ $v1 % 26;
#X obj 363 476 +~;
#X text 386 476 +lp;
#X obj 363 454 expr~ $v1 % 26;
#X obj 363 433 +~ 26;
#X obj 363 412 -~;
#X text 387 412 -mp;
#X obj 243 646 tabread~;
#X obj 243 497 expr~ $v1 % 26;
#X obj 243 476 +~;
#X text 267 477 +mp;
#X obj 243 454 expr~ $v1 % 26;
#X obj 243 433 +~ 26;
#X obj 243 412 -~;
#X text 267 412 -rp;
#X obj 123 646 tabread~;
#X obj 123 454 expr~ $v1 % 26;
#X obj 123 412 +~;
#X text 148 411 -rp;
#X obj 23 646 tabread~ \$0-etw;
#X obj 598 392 sig~;
#X obj 23 251 s \$0-up;
#X obj 1125 184 + 2;
#X obj 1125 205 % 26;
#X obj 1125 226 sig~;
#X obj 1165 185 sig~;
#X obj 1268 254 expr~ $v1==$v2;
#X obj 1099 421 expr~ $v1==$v2 \; $v3==$v4 \;;
#X obj 23 625 inlet~;
#X text 1057 139 clock;
#N canvas 179 51 1239 522 arrays 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-r3 26 float 3;
#A 0 2 9 6 3 15 18 7 10 19 20 17 0 22 25 23 5 12 24 13 16 14 1 21 11
8 4;
#X coords 0 25 26 0 200 140 1 0 0;
#X restore 30 351 graph;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-r2 26 float 3;
#A 0 18 11 21 6 1 19 5 23 9 16 14 7 4 22 8 17 25 24 0 12 10 15 2 13
3 20;
#X coords 0 25 26 0 200 140 1 0 0;
#X restore 30 191 graph;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-r1 26 float 3;
#A 0 11 15 6 18 25 12 7 0 4 14 16 10 21 23 17 5 24 1 20 19 13 8 2 9
3 22;
#X coords 0 25 26 0 200 140 1 0 0;
#X restore 30 31 graph;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-ukw 26 float 3;
#A 0 8 12 4 19 2 6 5 17 0 24 18 16 1 25 23 22 11 7 10 3 21 20 15 14
9 13;
#X coords 0 25 26 0 200 140 1 0 0;
#X restore 450 351 graph;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-etw 26 float 3;
#A 0 9 22 20 11 2 12 13 14 7 15 16 25 24 23 8 17 0 3 10 4 6 21 1 19
18 5;
#X coords 0 25 26 0 200 140 1 0 0;
#X restore 450 31 graph;
#X obj 670 31 loadbang;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-_r1 26 float 3;
#A 0 7 17 22 24 8 15 2 6 21 23 11 0 5 20 9 1 10 14 3 19 18 12 25 13
16 4;
#X coords 0 25 26 0 200 140 1 0 0;
#X restore 240 31 graph;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-_r2 26 float 3;
#A 0 18 4 22 24 12 6 3 11 14 8 20 1 19 23 10 21 9 15 0 5 25 2 13 7
17 16;
#X coords 0 25 26 0 200 140 1 0 0;
#X restore 240 191 graph;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-_r3 26 float 3;
#A 0 11 21 0 3 25 15 2 6 24 1 7 23 16 18 20 4 19 10 5 8 9 22 12 14
17 13;
#X coords 0 25 26 0 200 140 1 0 0;
#X restore 240 351 graph;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-_etw 26 float 3;
#A 0 16 22 4 17 19 25 20 8 14 0 18 3 5 6 7 9 10 15 24 23 2 21 1 13
12 11;
#X coords 0 25 26 0 200 140 1 0 0;
#X restore 450 191 graph;
#X obj 670 52 list prepend \$0-etw \$0-_etw \$0-r1 \$0-_r1 \$0-r2 \$0-_r2
\$0-r3 \$0-_r3 \$0-ukw;
#X msg 670 84 \; \$1 0 9 22 20 11 2 12 13 14 7 15 16 25 24 23 8 17
0 3 10 4 6 21 1 19 18 5 \; \$2 0 16 22 4 17 19 25 20 8 14 0 18 3 5
6 7 9 10 15 24 23 2 21 1 13 12 11 \; \$3 0 11 15 6 18 25 12 7 0 4 14
16 10 21 23 17 5 24 1 20 19 13 8 2 9 3 22 \; \$4 0 7 17 22 24 8 15
2 6 21 23 11 0 5 20 9 1 10 14 3 19 18 12 25 13 16 4 \; \$5 0 18 11
21 6 1 19 5 23 9 16 14 7 4 22 8 17 25 24 0 12 10 15 2 13 3 20 \; \$6
0 18 4 22 24 12 6 3 11 14 8 20 1 19 23 10 21 9 15 0 5 25 2 13 7 17
16 \; \$7 0 2 9 6 3 15 18 7 10 19 20 17 0 22 25 23 5 12 24 13 16 14
1 21 11 8 4 \; \$8 0 11 21 0 3 25 15 2 6 24 1 7 23 16 18 20 4 19 10
5 8 9 22 12 14 17 13 \; \$9 0 8 12 4 19 2 6 5 17 0 24 18 16 1 25 23
22 11 7 10 3 21 20 15 14 9 13;
#X text 1040 95 <- entry wheel;
#X text 1039 117 <- inverse of entry wheel;
#X text 1040 139 <- wheel type 1;
#X text 1040 161 <- inverse of wheel type 1;
#X text 1040 183 <- wheel type 2;
#X text 1040 205 <- inverse of wheel type 2;
#X text 1040 227 <- wheel type 3;
#X text 1040 249 <- inverse of wheel type 3;
#X text 1040 271 <- reflector wheel;
#X text 675 411 Each array contains the transfer function (or 'wiring')
for the etw \, rotors \, and ukw in the commercial Enigma. The arrays
are repopulated via the message boxes above during load time \, just
in case the are overwritten by accident!;
#X connect 5 0 10 0;
#X connect 10 0 11 0;
#X restore 23 297 pd arrays;
#X obj 23 137 loadbang;
#X obj 23 168 symbol \$1;
#X obj 143 168 float \$3;
#X obj 83 168 float \$2;
#X obj 203 168 float \$4;
#X obj 23 209 list fromsymbol;
#X obj 23 230 - 97;
#X text 281 25 signal_enigma - a draft signal-rate emulation of the
commercial Enigma D cipher machine. ring setting has been omited to
reduce cpu (addition expr~ objects required) and i haven't quite figured
out how to impliment wheel position initialization using signal-based
counters. the emulation does \, however \, allow different wheel orders
and ukw positions. it also double-steps correctly - though at very
fast audio rates the delay objects and block sizes might cause errors..?
;
#X obj 3 717 outlet~;
#X text 24 335 plain text input (signal 0-25);
#X text 21 25 creation arguments:;
#X text 21 45 1: ukw position (symbol \, a-z);
#X text 21 65 2: left wheel (float \, 1-3);
#X text 21 85 3: middle wheel (float \, 1-3);
#X text 21 105 4: right wheel (float \, 1-3);
#X text 1001 612 lw pos;
#X text 1055 612 mw pos;
#X text 1109 614 rw pos;
#X obj 1160 594 outlet~;
#X text 1159 634 step;
#X text 1219 614 mw;
#X text 1219 634 step;
#X obj 1220 574 -~ 1;
#X obj 1220 595 outlet~;
#X obj 123 667 outlet~;
#X obj 23 667 outlet~;
#X text 24 685 etw out;
#X text 124 685 rw out;
#X obj 243 667 outlet~;
#X text 244 685 mw out;
#X obj 363 667 outlet~;
#X text 364 685 lw out;
#X obj 483 667 outlet~;
#X text 484 685 ukw out;
#X obj 713 667 outlet~;
#X obj 843 667 outlet~;
#X text 584 685 lw out;
#X text 714 685 mw out;
#X text 844 685 rw out;
#X text 3 737 ciphertext output;
#X obj 583 667 outlet~;
#X text 281 135 there are a lot of outputs and hopefully these will
turn out to be useful:;
#X text 541 165 9: leftmost wheel position;
#X text 541 184 10: middle wheel position;
#X text 541 204 11: rightmost wheel position;
#X text 541 224 12: rightmost wheel position;
#X text 541 244 13: leftmost wheel step;
#X text 541 264 14: middle wheel step;
#X text 1159 614 lw;
#X obj 1054 159 inlet~;
#X text 281 165 1: ciphertext output;
#X text 281 185 2: etw cipher;
#X text 281 205 3: rightmost wheel cipher (right to left);
#X text 281 225 4: central wheel cipher (right to left);
#X text 281 245 5: leftmost wheel cipher (right to left);
#X text 281 265 6: ukw cipher;
#X text 281 285 7: leftmost wheel cipher (left to right);
#X text 281 305 8: middle wheel cipher (left to right);
#X text 281 325 9: rightmost cipher (left to right);
#X text 691 25 inlets:;
#X text 691 55 1: plain text (floats 0 - 25);
#X text 691 75 2: clock (steps machine);
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 12 0;
#X connect 2 0 20 0;
#X connect 2 0 76 1;
#X connect 2 0 80 1;
#X connect 2 0 122 1;
#X connect 2 0 126 1;
#X connect 2 0 135 0;
#X connect 2 0 136 0;
#X connect 3 0 4 0;
#X connect 3 0 158 0;
#X connect 4 0 5 0;
#X connect 5 0 6 1;
#X connect 5 0 18 0;
#X connect 6 0 8 0;
#X connect 7 0 16 0;
#X connect 7 0 22 0;
#X connect 7 0 92 1;
#X connect 7 0 96 1;
#X connect 7 0 106 1;
#X connect 7 0 110 1;
#X connect 8 0 7 0;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 11 0 15 0;
#X connect 11 0 21 0;
#X connect 11 0 84 1;
#X connect 11 0 88 1;
#X connect 11 0 114 1;
#X connect 11 0 118 1;
#X connect 11 0 136 2;
#X connect 13 0 0 0;
#X connect 14 0 9 0;
#X connect 17 0 6 0;
#X connect 19 0 9 1;
#X connect 19 0 162 0;
#X connect 28 0 29 0;
#X connect 29 0 131 0;
#X connect 29 0 134 0;
#X connect 30 0 31 0;
#X connect 31 0 32 0;
#X connect 32 0 136 3;
#X connect 36 0 124 0;
#X connect 37 0 36 0;
#X connect 38 0 36 0;
#X connect 39 0 36 0;
#X connect 40 0 116 0;
#X connect 41 0 40 0;
#X connect 42 0 40 0;
#X connect 43 0 40 0;
#X connect 44 0 108 0;
#X connect 45 0 44 0;
#X connect 46 0 44 0;
#X connect 47 0 44 0;
#X connect 48 0 37 0;
#X connect 48 1 38 0;
#X connect 48 2 39 0;
#X connect 49 0 41 0;
#X connect 49 1 42 0;
#X connect 49 2 43 0;
#X connect 50 0 45 0;
#X connect 50 1 46 0;
#X connect 50 2 47 0;
#X connect 51 0 94 0;
#X connect 52 0 57 0;
#X connect 52 1 58 0;
#X connect 52 2 59 0;
#X connect 53 0 86 0;
#X connect 54 0 60 0;
#X connect 54 1 61 0;
#X connect 54 2 62 0;
#X connect 55 0 78 0;
#X connect 56 0 63 0;
#X connect 56 1 64 0;
#X connect 56 2 65 0;
#X connect 57 0 51 0;
#X connect 58 0 51 0;
#X connect 59 0 51 0;
#X connect 60 0 53 0;
#X connect 61 0 53 0;
#X connect 62 0 53 0;
#X connect 63 0 55 0;
#X connect 64 0 55 0;
#X connect 65 0 55 0;
#X connect 66 0 48 0;
#X connect 67 0 50 0;
#X connect 68 0 52 0;
#X connect 69 0 54 0;
#X connect 70 0 56 0;
#X connect 71 0 49 0;
#X connect 72 0 129 0;
#X connect 73 0 148 0;
#X connect 74 0 73 0;
#X connect 75 0 74 0;
#X connect 76 0 75 0;
#X connect 78 0 76 0;
#X connect 78 0 175 0;
#X connect 79 0 78 0;
#X connect 80 0 79 0;
#X connect 82 0 80 0;
#X connect 83 0 82 0;
#X connect 84 0 83 0;
#X connect 86 0 84 0;
#X connect 86 0 174 0;
#X connect 87 0 86 0;
#X connect 88 0 87 0;
#X connect 90 0 88 0;
#X connect 91 0 90 0;
#X connect 92 0 91 0;
#X connect 94 0 92 0;
#X connect 94 0 180 0;
#X connect 95 0 94 0;
#X connect 96 0 95 0;
#X connect 98 0 96 0;
#X connect 99 0 98 0;
#X connect 100 0 99 0;
#X connect 101 0 100 0;
#X connect 101 0 172 0;
#X connect 102 0 101 0;
#X connect 103 0 102 0;
#X connect 104 0 103 0;
#X connect 105 0 104 0;
#X connect 106 0 105 0;
#X connect 108 0 106 0;
#X connect 108 0 170 0;
#X connect 109 0 108 0;
#X connect 110 0 109 0;
#X connect 112 0 110 0;
#X connect 113 0 112 0;
#X connect 114 0 113 0;
#X connect 116 0 114 0;
#X connect 116 0 168 0;
#X connect 117 0 116 0;
#X connect 118 0 117 0;
#X connect 120 0 118 0;
#X connect 121 0 120 0;
#X connect 122 0 121 0;
#X connect 124 0 122 0;
#X connect 124 0 164 0;
#X connect 125 0 124 0;
#X connect 126 0 125 0;
#X connect 128 0 126 0;
#X connect 128 0 165 0;
#X connect 129 0 100 1;
#X connect 129 0 103 1;
#X connect 131 0 132 0;
#X connect 132 0 133 0;
#X connect 133 0 136 1;
#X connect 134 0 135 1;
#X connect 135 0 9 1;
#X connect 135 0 162 0;
#X connect 136 0 3 0;
#X connect 136 1 3 1;
#X connect 137 0 128 0;
#X connect 140 0 142 0;
#X connect 140 0 143 0;
#X connect 140 0 141 0;
#X connect 140 0 144 0;
#X connect 141 0 145 0;
#X connect 142 0 26 0;
#X connect 143 0 24 0;
#X connect 144 0 25 0;
#X connect 145 0 146 0;
#X connect 146 0 130 0;
#X connect 162 0 163 0;
#X connect 189 0 0 1;
